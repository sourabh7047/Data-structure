package DSA.ARRAY;
import java.util.Arrays;
import java.util.Scanner;


public class operatingSystem {

        static double rd[] = new double[(int) 1e5];
        static double rt[] = new double[(int) 1e5];

        

  public static void main(String args[])
  {
    Scanner s = new Scanner(System.in);
    System.out.println ("MENU ");
    System.out.println ("PRESS 1 FOR NON-PREEMPTIVE ");
    System.out.println ("PRESS 2 FOR PREEMPTIVE ");
    int press = s.nextInt();
    if(press==1) {
      Arrays.fill(rd, 0);
      Arrays.fill(rt, 0);
      System.out.println ("ENTER NUMBER OF PROCESSES: ");
      int n = s.nextInt();
      String process[] = new String[n]; 
      int burstTime[] = new int[n]; // burstTime means burst time
      int CompleteTime[] = new int[n]; // CompleteTime means complete time
      int turnAroundTime[] = new int[n+1]; // turnAroundTime means turn around time
      int waitingTime[] = new int[n+1];  //waitingTime means waiting time
      int flag[] = new int[n];  // flag means it is flag it checks process is completed or not
       int priority[] = new int[n];
      int st=0, tot=0;
      float avg_wt=0, avg_tat=0,avg_rd=0,avg_rt=0;
   
      for(int i=0;i<n;i++)
      {
        
        process[i] = "P"+(i+1);
        System.out.println ("ENTER PROCESS " + (i+1) + " BURST TIME : ");
        burstTime[i] = s.nextInt();
        
      }
       System.out.print("Enter Priority for " + n + " process: ");
      for (int i = 0; i < n; i++) {
              priority[i] = s.nextInt();
          }
      int prep1;
      String prep2;
      for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - 1; j++) {
//              System.out.println(priority[j]);
                  if (priority[j] > priority[j + 1]) {
                         prep1 = priority[j];
                          priority[j] = priority[j + 1];
                          priority[j + 1] = prep1;

                          prep1 = burstTime[j];
                          burstTime[j] = burstTime[j + 1];
                          burstTime[j + 1] = prep1;

                          prep2 = process[j];
                          process[j] = process[j + 1];
                          process[j + 1] = prep2;

                      }
                  }
              }
      for (int i = 0; i < n; i++) {
              turnAroundTime[i] = burstTime[i] + waitingTime[i];
              waitingTime[i + 1] = turnAroundTime[i];
          }
      Relative_Delay(n, burstTime, turnAroundTime, rd);
      
      System.out.println("Process     burstTime      waitingTime        turnAroundTime      RD");
      for (int i = 0; i < n; i++) {

System.out.println(process[i] + "          " + burstTime[i] + "       " + waitingTime[i] + "         " + (turnAroundTime[i])+"         " +rd[i]);
              avg_tat += waitingTime[i] + burstTime[i];
              avg_wt += waitingTime[i];
              avg_rd += rd[i];
          }
      System.out.println ("\nAVERAGE turnAroundTime =  "+ (float)(avg_tat/n));
      System.out.println ("AVERAGE waitingTime = "+ (float)(avg_wt/n));
      System.out.println ("AVERAGE RD = "+ (float)(avg_rd/n));
//      System.out.println ("AVERAGE RT = "+ (float)(avg_rd/n));//Non-preemptive has waitingTime=rt
    }
    else {
//      Arrays.fill(rd, 0);
//      Arrays.fill(rt, 0);
      System.out.println ("ENTER NUMBER OF PROCESSES: ");
      int n= s.nextInt();
//      System.out.println("n = "+ n);
      int arriavalTime[] = new int[n]; 
      int burstTime[] = new int[n]; 
//      int burstTime_prep[] = new int[n];
      int CompleteTime[] = new int[n]; 
      int turnAroundTime[] = new int[n];
      int waitingTime[] = new int[n];  
      int process[] = new int[n];  
      int priority[]= new int[n];   
      
        int  i,st=0, tot=0,burst_time=0;
        float avg_wt=0, avg_turnAroundTime=0,avg_rd=0,avg_rt=0;
         for ( i=0;i<n;i++){
           process[i]=(i+1);
//             System.out.println ("ENTER PROCESS " + (i+1) + " ARRIVAL TIME : ");
//          arriavalTime[i]= s.nextInt();
          System.out.println("ENTER PROCESS " + (i+1) + " BURST TIME : ");
          burstTime[i]= s.nextInt();
          System.out.println("ENTER PROCESS " + (i+1) + " PRIORITY : ");
          priority[i]= s.nextInt();
          burst_time+=burstTime[i];
        }
         int prep=0,prep2=0;
        for( i = 0; i < n - 1; i++)
         {
               for(int j = i + 1; j < n; j++)
               {
                 if (priority[j] > priority[i]) {
                       prep = priority[j];
                        priority[j] = priority[i];
                        priority[i] = prep;

                        prep = burstTime[j];
                        burstTime[j] = burstTime[i];
                        burstTime[i] = prep;

                        prep2 = process[i];
                        process[i] = process[j];
                        process[j] = prep2;

                    }
                }
         }
         
//        System.out.println("n = "+n);
//        for( i=0;i<n;i++)System.out.println(turnAroundTime[i]);
       
//          Response_time(n, burstTime, arriavalTime, rt);
     waitingTime[0]=0;
     avg_wt=0;
     turnAroundTime[0]=burstTime[0];
     avg_turnAroundTime=turnAroundTime[0];
     for(i=1;i<n;i++){
        waitingTime[i]=turnAroundTime[i-1];
        avg_wt+=waitingTime[i];
        turnAroundTime[i]=waitingTime[i]+burstTime[i];
        avg_turnAroundTime+=turnAroundTime[i];
      }
//        Relative_Delay(n, k, turnAroundTime, rd);
//        for( i=0;i<n;i++)avg_rd+=rd[i];
        System.out.println("Process    burstTime    turnAroundTime    waitingTime    ");
        for(i=0;i<n;i++)
        {
          System.out.println(process[i]+"   "+ turnAroundTime[i] +"    "+ waitingTime[i]+"    ");
        }
        
        System.out.println("AVERAGE turnAroundTime = "+ (float)(avg_turnAroundTime/n));
        System.out.println("AVERAGE waitingTime = "+ (float)(avg_wt/n));
//        System.out.println ("AVERAGE RD = "+ (float)(avg_rd/n));
//        System.out.println ("AVERAGE RT = "+ (float)(avg_rt/n));
    } 
  }
  private static void Relative_Delay(int n, int[] burstTime, int[] turnAroundTime, double[] rd) {

    for (int i = 0; i < n; i++) {
        // System.out.println(turnAroundTime[i]);
        rd[i] = turnAroundTime[i] / burstTime[i];
        // System.out.println(rd[i]);
    }
}
    }
    
    // MENU 
    // PRESS 1 FOR NON-PREEMPTIVE 
    // PRESS 2 FOR PREEMPTIVE     
    // 1
    // ENTER NUMBER OF PROCESSES: 
    // 10
    // ENTER PROCESS 1 BURST TIME : 
    // 1
    // ENTER PROCESS 2 BURST TIME : 
    // 34
    // ENTER PROCESS 3 BURST TIME : 
    // 21
    // ENTER PROCESS 4 BURST TIME : 
    // 12
    // ENTER PROCESS 5 BURST TIME : 
    // 2
    // ENTER PROCESS 6 BURST TIME : 
    // 4
    // ENTER PROCESS 7 BURST TIME : 
    // 23
    // ENTER PROCESS 8 BURST TIME : 
    // 23
    // ENTER PROCESS 9 BURST TIME : 
    // 11
    // ENTER PROCESS 10 BURST TIME : 
    // 1
    // Enter Priority for 10 process: 65
    // 43 1 2 3 12 16 24 54 2
    // Process     burstTime      waitingTime        turnAroundTime      RD
    // P3          21       0         21         1.0
    // P4          12       21         33         2.0
    // P10          1       33         34         34.0
    // P5          2       34         36         18.0
    // P6          4       36         40         10.0
    // P7          23       40         63         2.0
    // P8          23       63         86         3.0
    // P2          34       86         120         3.0
    // P9          11       120         131         11.0
    // P1          1       131         132         132.0
    
    // AVERAGE turnAroundTime =  69.6
    // AVERAGE waitingTime = 56.4
    // AVERAGE RD = 21.6